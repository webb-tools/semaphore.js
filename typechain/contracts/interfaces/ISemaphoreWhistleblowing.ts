/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ISemaphoreWhistleblowing {
  export type EntityStruct = { id: BigNumberish; maxEdges: BigNumberish };

  export type EntityStructOutput = [BigNumber, number] & {
    id: BigNumber;
    maxEdges: number;
  };
}

export interface ISemaphoreWhistleblowingInterface extends utils.Interface {
  functions: {
    "addWhistleblower(uint256,uint256)": FunctionFragment;
    "createEntity(uint256,uint8,uint256,address,uint8)": FunctionFragment;
    "publishLeak(bytes32,uint256,uint256,bytes,uint256[8])": FunctionFragment;
    "removeWhistleblower(uint256,uint256,uint256[],uint8[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addWhistleblower"
      | "createEntity"
      | "publishLeak"
      | "removeWhistleblower"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addWhistleblower",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEntity",
    values: [BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "publishLeak",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhistleblower",
    values: [BigNumberish, BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhistleblower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEntity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishLeak",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhistleblower",
    data: BytesLike
  ): Result;

  events: {
    "EntityCreated(tuple,address)": EventFragment;
    "LeakPublished(uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntityCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LeakPublished"): EventFragment;
}

export interface EntityCreatedEventObject {
  entity: ISemaphoreWhistleblowing.EntityStructOutput;
  editor: string;
}
export type EntityCreatedEvent = TypedEvent<
  [ISemaphoreWhistleblowing.EntityStructOutput, string],
  EntityCreatedEventObject
>;

export type EntityCreatedEventFilter = TypedEventFilter<EntityCreatedEvent>;

export interface LeakPublishedEventObject {
  entityId: BigNumber;
  leak: string;
}
export type LeakPublishedEvent = TypedEvent<
  [BigNumber, string],
  LeakPublishedEventObject
>;

export type LeakPublishedEventFilter = TypedEventFilter<LeakPublishedEvent>;

export interface ISemaphoreWhistleblowing extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISemaphoreWhistleblowingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addWhistleblower(
      entityId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createEntity(
      entityId: BigNumberish,
      depth: BigNumberish,
      zeroValue: BigNumberish,
      editor: string,
      maxEdges: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    publishLeak(
      leak: BytesLike,
      nullifierHash: BigNumberish,
      entityId: BigNumberish,
      roots: BytesLike,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWhistleblower(
      entityId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addWhistleblower(
    entityId: BigNumberish,
    identityCommitment: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createEntity(
    entityId: BigNumberish,
    depth: BigNumberish,
    zeroValue: BigNumberish,
    editor: string,
    maxEdges: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  publishLeak(
    leak: BytesLike,
    nullifierHash: BigNumberish,
    entityId: BigNumberish,
    roots: BytesLike,
    proof: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWhistleblower(
    entityId: BigNumberish,
    identityCommitment: BigNumberish,
    proofSiblings: BigNumberish[],
    proofPathIndices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addWhistleblower(
      entityId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createEntity(
      entityId: BigNumberish,
      depth: BigNumberish,
      zeroValue: BigNumberish,
      editor: string,
      maxEdges: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    publishLeak(
      leak: BytesLike,
      nullifierHash: BigNumberish,
      entityId: BigNumberish,
      roots: BytesLike,
      proof: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhistleblower(
      entityId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EntityCreated(tuple,address)"(
      entity?: null,
      editor?: string | null
    ): EntityCreatedEventFilter;
    EntityCreated(
      entity?: null,
      editor?: string | null
    ): EntityCreatedEventFilter;

    "LeakPublished(uint256,bytes32)"(
      entityId?: BigNumberish | null,
      leak?: null
    ): LeakPublishedEventFilter;
    LeakPublished(
      entityId?: BigNumberish | null,
      leak?: null
    ): LeakPublishedEventFilter;
  };

  estimateGas: {
    addWhistleblower(
      entityId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createEntity(
      entityId: BigNumberish,
      depth: BigNumberish,
      zeroValue: BigNumberish,
      editor: string,
      maxEdges: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    publishLeak(
      leak: BytesLike,
      nullifierHash: BigNumberish,
      entityId: BigNumberish,
      roots: BytesLike,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWhistleblower(
      entityId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addWhistleblower(
      entityId: BigNumberish,
      identityCommitment: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createEntity(
      entityId: BigNumberish,
      depth: BigNumberish,
      zeroValue: BigNumberish,
      editor: string,
      maxEdges: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    publishLeak(
      leak: BytesLike,
      nullifierHash: BigNumberish,
      entityId: BigNumberish,
      roots: BytesLike,
      proof: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWhistleblower(
      entityId: BigNumberish,
      identityCommitment: BigNumberish,
      proofSiblings: BigNumberish[],
      proofPathIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
