/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface LinkableIncrementalBinaryTreeInterface
  extends utils.Interface {
  functions: {
    "zeros(uint256)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "zeros"): FunctionFragment;

  encodeFunctionData(functionFragment: "zeros", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "zeros", data: BytesLike): Result;

  events: {
    "EdgeAddition(uint256,uint256,bytes32)": EventFragment;
    "EdgeUpdate(uint256,uint256,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EdgeAddition"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EdgeUpdate"): EventFragment;
}

export interface EdgeAdditionEventObject {
  chainID: BigNumber;
  latestLeafIndex: BigNumber;
  merkleRoot: string;
}
export type EdgeAdditionEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  EdgeAdditionEventObject
>;

export type EdgeAdditionEventFilter = TypedEventFilter<EdgeAdditionEvent>;

export interface EdgeUpdateEventObject {
  chainID: BigNumber;
  latestLeafIndex: BigNumber;
  merkleRoot: string;
}
export type EdgeUpdateEvent = TypedEvent<
  [BigNumber, BigNumber, string],
  EdgeUpdateEventObject
>;

export type EdgeUpdateEventFilter = TypedEventFilter<EdgeUpdateEvent>;

export interface LinkableIncrementalBinaryTree extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LinkableIncrementalBinaryTreeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<[string]>;
  };

  zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "EdgeAddition(uint256,uint256,bytes32)"(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): EdgeAdditionEventFilter;
    EdgeAddition(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): EdgeAdditionEventFilter;

    "EdgeUpdate(uint256,uint256,bytes32)"(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): EdgeUpdateEventFilter;
    EdgeUpdate(
      chainID?: null,
      latestLeafIndex?: null,
      merkleRoot?: null
    ): EdgeUpdateEventFilter;
  };

  estimateGas: {
    zeros(i: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    zeros(
      i: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
